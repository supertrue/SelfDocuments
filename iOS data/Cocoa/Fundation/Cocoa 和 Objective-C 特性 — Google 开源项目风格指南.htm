<!DOCTYPE html>
<!-- saved from url=(0085)http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/ -->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" lang="en"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>Cocoa 和 Objective-C 特性 — Google 开源项目风格指南</title>
  

  
  

  

  
  
    

  

  
  

  
    <link rel="stylesheet" href="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/sphinx_rtd_theme.css" type="text/css">
  

  
    <link rel="top" title="Google 开源项目风格指南" href="http://zh-google-styleguide.readthedocs.io/en/latest/">
        <link rel="up" title="Objective-C 风格指南 - 内容目录" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/contents/">
        <link rel="next" title="Cocoa 模式" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/patterns/">
        <link rel="prev" title="注释" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/comments/"> 

  
  <script type="text/javascript" async="" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/ga.js"></script><script src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/modernizr.min.js"></script>


<!-- RTD Extra Head -->

<!-- 
Always link to the latest version, as canonical.
http://docs.readthedocs.org/en/latest/canonical.html
-->
<link rel="canonical" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/">

<link rel="stylesheet" href="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/readthedocs-doc-embed.css" type="text/css">

<script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/readthedocs-data.js"></script>

<!-- Add page-specific data, which must exist in the page js, not global -->
<script type="text/javascript">
READTHEDOCS_DATA['page'] = 'google-objc-styleguide/features'
</script>

<script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/readthedocs-dynamic-include.js"></script>

<!-- end RTD <extrahead> --></head>

<body class="wy-body-for-nav" role="document">

  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          

          
            <a href="http://zh-google-styleguide.readthedocs.io/en/latest/contents/" class="icon icon-home"> Google 开源项目风格指南
          

          
          </a>

          
            
            
            
              <div class="version">
                latest
              </div>
            
          

          
<div role="search">
  <form id="rtd-search-form" class="wy-form" action="http://zh-google-styleguide.readthedocs.io/en/latest/search/" method="get">
    <input type="text" name="q" placeholder="Search docs">
    <input type="hidden" name="check_keywords" value="yes">
    <input type="hidden" name="area" value="default">
  </form>
</div>

          
        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
            
            
                <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/">Google 开源项目风格指南 (中文版)</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/">C++ 风格指南 - 内容目录</a></li>
<li class="toctree-l1 current"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/contents/"><span class="toctree-expand"></span>Objective-C 风格指南 - 内容目录</a><ul class="current">
<li class="toctree-l2"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/">Google Objective-C Style Guide 中文版</a></li>
<li class="toctree-l2"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/spacing/">留白和格式</a></li>
<li class="toctree-l2"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/naming/">命名</a></li>
<li class="toctree-l2"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/comments/">注释</a></li>
<li class="toctree-l2 current"><a class="current reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/"><span class="toctree-expand"></span>Cocoa 和 Objective-C 特性</a><ul>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#private">成员变量应该是 <code class="docutils literal"><span class="pre">@private</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id1">明确指定构造函数</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id2">重载指定构造函数</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#nsobject">重载 <code class="docutils literal"><span class="pre">NSObject</span></code> 的方法</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id3">初始化</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#new">避免 <code class="docutils literal"><span class="pre">+new</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#api">保持公共 API 简单</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#import-and-include"><code class="docutils literal"><span class="pre">#import</span></code> and <code class="docutils literal"><span class="pre">#include</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id5">使用根框架</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#autorelease">构建时即设定 <code class="docutils literal"><span class="pre">autorelease</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#autorelease-retain"><code class="docutils literal"><span class="pre">autorelease</span></code> 优先 <code class="docutils literal"><span class="pre">retain</span></code> 其次</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#init-dealloc"><code class="docutils literal"><span class="pre">init</span></code> 和 <code class="docutils literal"><span class="pre">dealloc</span></code> 内避免使用访问器</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id6">按声明顺序销毁实例变量</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#setter-nsstrings"><code class="docutils literal"><span class="pre">setter</span></code> 应复制 NSStrings</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#avoid-throwing-exceptions">避免抛异常</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#nil">nil 检查</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#bool">BOOL 若干陷阱</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#property"><span class="toctree-expand"></span>属性（Property）</a><ul>
<li class="toctree-l4"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id8">命名</a></li>
<li class="toctree-l4"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id9">位置</a></li>
<li class="toctree-l4"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#copy-attribute">字符串应使用 <code class="docutils literal"><span class="pre">copy</span></code> 属性（Attribute）</a></li>
<li class="toctree-l4"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id10">原子性</a></li>
<li class="toctree-l4"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id11">点引用</a></li>
</ul>
</li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#id12">没有实例变量的接口</a></li>
<li class="toctree-l3"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/#synthesize">自动 <code class="docutils literal"><span class="pre">synthesize</span></code> 实例变量</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/patterns/">Cocoa 模式</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/">Python 风格指南 - 内容目录</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/">Shell 风格指南 - 内容目录</a></li>
</ul>

            
          
        </div>
      <div class="wy-menu rst-pro"><div class="rst-pro-about"><a href="http://docs.readthedocs.org/en/latest/sponsors.html#sponsorship-information"><i class="fa fa-info-circle"></i></a></div><a class="rst-pro-image-wrapper" href="http://readthedocs.org/sustainability/click/11/atfeisj1jw2S/" target="_blank"><img class="rst-pro-image" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/saved_resource"></a><span>Come to Prague for <a class="rst-pro-link" href="http://readthedocs.org/sustainability/click/11/atfeisj1jw2S/" target="_blank">Write the Docs EU</a><a class="rst-pro-link" href="http://readthedocs.org/sustainability/click/11/atfeisj1jw2S/" target="_blank">, September 18-20.</a></span></div><div class="rst-pro-wrapper"></div></div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
        <a href="http://zh-google-styleguide.readthedocs.io/en/latest/contents/">Google 开源项目风格指南</a>
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          





<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="http://zh-google-styleguide.readthedocs.io/en/latest/contents/">Docs</a> »</li>
      
          <li><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/contents/">Objective-C 风格指南 - 内容目录</a> »</li>
      
    <li>Cocoa 和 Objective-C 特性</li>
      <li class="wy-breadcrumbs-aside">
        
          
            <a href="https://github.com/zh-google-styleguide/zh-google-styleguide/blob/master/google-objc-styleguide/features.rst" class="fa fa-github"> Edit on GitHub</a>
          
        
      </li>
  </ul>
  <hr>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="cocoa-objective-c">
<h1>Cocoa 和 Objective-C 特性</h1>
<div class="section" id="private">
<h2>成员变量应该是 <code class="docutils literal"><span class="pre">@private</span></code></h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">成员变量应该声明为 <code class="docutils literal"><span class="pre">@private</span></code></p>
</div>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="k">@interface</span> <span class="bp">MyClass</span> : <span class="bp">NSObject</span> <span class="p">{</span>
 <span class="k">@private</span>
  <span class="kt">id</span> <span class="n">myInstanceVariable_</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// public accessors, setter takes ownership</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">myInstanceVariable</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setMyInstanceVariable:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">theVar</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
</div>
</div>
<div class="section" id="id1">
<h2>明确指定构造函数</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">注释并且明确指定你的类的构造函数。</p>
</div>
<p>对于需要继承你的类的人来说，明确指定构造函数十分重要。这样他们就可以只重写一个构造函数（可能是几个）来保证他们的子类的构造函数会被调用。这也有助于将来别人调试你的类时，理解初始化代码的工作流程。</p>
</div>
<div class="section" id="id2">
<h2>重载指定构造函数</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">当你写子类的时候，如果需要 <code class="docutils literal"><span class="pre">init…</span></code> 方法，记得重载父类的指定构造函数。</p>
</div>
<p>如果你没有重载父类的指定构造函数，你的构造函数有时可能不会被调用，这会导致非常隐秘而且难以解决的 bug。</p>
</div>
<div class="section" id="nsobject">
<h2>重载 <code class="docutils literal"><span class="pre">NSObject</span></code> 的方法</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">如果重载了 <code class="docutils literal"><span class="pre">NSObject</span></code> 类的方法，强烈建议把它们放在 <code class="docutils literal"><span class="pre">@implementation</span></code> 内的起始处，这也是常见的操作方法。</p>
</div>
<p>通常适用（但不局限）于 <code class="docutils literal"><span class="pre">init...</span></code>，<code class="docutils literal"><span class="pre">copyWithZone:</span></code>，以及 <code class="docutils literal"><span class="pre">dealloc</span></code> 方法。所有 <code class="docutils literal"><span class="pre">init...</span></code> 方法应该放在一起，<code class="docutils literal"><span class="pre">copyWithZone:</span></code> 紧随其后，最后才是 <code class="docutils literal"><span class="pre">dealloc</span></code> 方法。</p>
</div>
<div class="section" id="id3">
<h2>初始化</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">不要在 init 方法中，将成员变量初始化为 <code class="docutils literal"><span class="pre">0</span></code> 或者 <code class="docutils literal"><span class="pre">nil</span></code>；毫无必要。</p>
</div>
<p>刚分配的对象，默认值都是 0，除了 <code class="docutils literal"><span class="pre">isa</span></code> 指针（译者注：<code class="docutils literal"><span class="pre">NSObject</span></code> 的 <code class="docutils literal"><span class="pre">isa</span></code> 指针，用于标识对象的类型）。所以不要在初始化器里面写一堆将成员初始化为 <code class="docutils literal"><span class="pre">0</span></code> 或者 <code class="docutils literal"><span class="pre">nil</span></code> 的代码。</p>
</div>
<div class="section" id="new">
<h2>避免 <code class="docutils literal"><span class="pre">+new</span></code></h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">不要调用 <code class="docutils literal"><span class="pre">NSObject</span></code> 类方法 <code class="docutils literal"><span class="pre">new</span></code>，也不要在子类中重载它。使用 <code class="docutils literal"><span class="pre">alloc</span></code> 和 <code class="docutils literal"><span class="pre">init</span></code> 方法创建并初始化对象。</p>
</div>
<p>现代的 Ojbective-C 代码通过调用 <code class="docutils literal"><span class="pre">alloc</span></code> 和 <code class="docutils literal"><span class="pre">init</span></code> 方法来创建并 retain 一个对象。由于类方法 <code class="docutils literal"><span class="pre">new</span></code> 很少使用，这使得有关内存分配的代码审查更困难。</p>
</div>
<div class="section" id="api">
<h2>保持公共 API 简单</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">保持类简单；避免 “厨房水槽（kitchen-sink）” 式的 API。如果一个函数压根没必要公开，就不要这么做。用私有类别保证公共头文件整洁。</p>
</div>
<p>与 C++ 不同，Objective-C 没有方法来区分公共的方法和私有的方法 – 所有的方法都是公共的（译者注：这取决于 Objective-C 运行时的方法调用的消息机制）。因此，除非客户端的代码期望使用某个方法，不要把这个方法放进公共 API 中。尽可能的避免了你你不希望被调用的方法却被调用到。这包括重载父类的方法。对于内部实现所需要的方法，在实现的文件中定义一个类别，而不是把它们放进公有的头文件中。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="c1">// GTMFoo.m</span>
<span class="cp">#import "GTMFoo.h"</span>

<span class="k">@interface</span> <span class="nc">GTMFoo</span> <span class="nl">(PrivateDelegateHandling)</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">doSomethingWithDelegate</span><span class="p">;</span>  <span class="c1">// Declare private method</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">GTMFoo</span><span class="nl">(PrivateDelegateHandling)</span>
<span class="p">...</span>
<span class="o">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">doSomethingWithDelegate</span> <span class="p">{</span>
  <span class="c1">// Implement this method</span>
<span class="p">}</span>
<span class="p">...</span>
<span class="k">@end</span>
</pre></div>
</div>
<p>Objective-C 2.0 以前，如果你在私有的 <code class="docutils literal"><span class="pre">@interface</span></code> 中声明了某个方法，但在 <code class="docutils literal"><span class="pre">@implementation</span></code> 中忘记定义这个方法，编译器不会抱怨（这是因为你没有在其它的类别中实现这个私有的方法）。解决文案是将方法放进指定类别的 <code class="docutils literal"><span class="pre">@implemenation</span></code> 中。</p>
<p>如果你在使用 Objective-C 2.0，相反你应该使用 <a class="reference external" href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_4_section_5.html">类扩展</a> 来声明你的私有类别，例如：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="k">@interface</span> <span class="nc">GMFoo</span> <span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</pre></div>
</div>
<p>这么做确保如果声明的方法没有在 <code class="docutils literal"><span class="pre">@implementation</span></code> 中实现，会触发一个编译器告警。</p>
<p>再次说明，“私有的” 方法其实不是私有的。你有时可能不小心重载了父类的私有方法，因而制造出很难查找的 Bug。通常，私有的方法应该有一个相当特殊的名字以防止子类无意地重载它们。</p>
<p>Ojbective-C 的类别可以用来将一个大的 <code class="docutils literal"><span class="pre">@implementation</span></code> 拆分成更容易理解的小块，同时，类别可以为最适合的类添加新的、特定应用程序的功能。例如，当添加一个 “middle truncation” 方法时，创建一个 <code class="docutils literal"><span class="pre">NSString</span></code> 的新类别并把方法放在里面，要比创建任意的一个新类把方法放进里面好得多。</p>
</div>
<div class="section" id="import-and-include">
<h2><code class="docutils literal"><span class="pre">#import</span></code> and <code class="docutils literal"><span class="pre">#include</span></code></h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><code class="docutils literal"><span class="pre">#import</span></code> Ojbective-C/Objective-C++ 头文件，<code class="docutils literal"><span class="pre">#include</span></code> C/C++ 头文件。</p>
</div>
<p>基于你所包括的头文件的编程语言，选择使用 <code class="docutils literal"><span class="pre">#import</span></code> 或是 <code class="docutils literal"><span class="pre">#include</span></code>：</p>
<ul class="simple">
<li>当包含一个使用 Objective-C、Objective-C++ 的头文件时，使用 <code class="docutils literal"><span class="pre">#import</span></code> 。</li>
<li>当包含一个使用标准 C、C++ 头文件时，使用 <code class="docutils literal"><span class="pre">#include</span></code>。头文件应该使用 <a class="reference external" href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=The__define_Guard#The__define_Guard">#define 保护</a>。</li>
</ul>
<p>一些 Ojbective-C 的头文件缺少 <code class="docutils literal"><span class="pre">#define</span></code> 保护，需要使用 <code class="docutils literal"><span class="pre">#import</span></code> 的方式包含。由于 Objective-C 的头文件只会被 Objective-C 的源文件及头文件包含，广泛地使用 <code class="docutils literal"><span class="pre">#import</span></code> 是可以的。</p>
<p>文件中没有 Objective-C 代码的标准 C、C++ 头文件，很可能会被普通的 C、C++ 包含。由于标准 C、C++ 里面没有 <code class="docutils literal"><span class="pre">#import</span></code> 的用法，这些文件将被 <code class="docutils literal"><span class="pre">#include</span></code>。在 Objective-C 源文件中使用 <code class="docutils literal"><span class="pre">#include</span></code> 包含这些头文件，意味着这些头文件永远会在相同的语义下包含。</p>
<p>这条规则帮助跨平台的项目避免低级错误。某个 Mac 开发者写了一个新的 C 或 C++ 头文件，如果忘记使用 <code class="docutils literal"><span class="pre">#define</span></code> 保护，在 Mac 下使用 <code class="docutils literal"><span class="pre">#import</span></code> 这个头文件不回引起问题，但是在其它平台下使用 <code class="docutils literal"><span class="pre">#include</span></code> 将可能编译失败。在所有的平台上统一使用 <code class="docutils literal"><span class="pre">#include</span></code>，意味着构造更可能全都成功或者失败，防止这些文件只能在某些平台下能够工作。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="cp">#import &lt;Cocoa/Cocoa.h&gt;</span>
<span class="cp">#include</span> <span class="cpf">&lt;CoreFoundation/CoreFoundation.h&gt;</span><span class="cp"></span>
<span class="cp">#import "GTMFoo.h"</span>
<span class="cp">#include</span> <span class="cpf">"base/basictypes.h"</span><span class="cp"></span>
</pre></div>
</div>
</div>
<div class="section" id="id5">
<h2>使用根框架</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><code class="docutils literal"><span class="pre">#import</span></code> 根框架而不是单独的零散文件</p>
</div>
<p>当你试图从框架（如 Cocoa 或者 Foundation）中包含若干零散的系统头文件时，实际上包含顶层根框架的话，编译器要做的工作更少。根框架通常已经经过预编译，加载更快。另外记得使用 <code class="docutils literal"><span class="pre">#import</span></code> 而不是 <code class="docutils literal"><span class="pre">#include</span></code> 来包含 Objective-C 的框架。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="cp">#import &lt;Foundation/Foundation.h&gt;     </span><span class="c1">// good</span>

<span class="cp">#import &lt;Foundation/NSArray.h&gt;        </span><span class="c1">// avoid</span>
<span class="cp">#import &lt;Foundation/NSString.h&gt;</span>
<span class="p">...</span>
</pre></div>
</div>
</div>
<div class="section" id="autorelease">
<h2>构建时即设定 <code class="docutils literal"><span class="pre">autorelease</span></code></h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">当创建临时对象时，在同一行使用 <code class="docutils literal"><span class="pre">autolease</span></code>，而不是在同一个方法的后面语句中使用一个单独的 <code class="docutils literal"><span class="pre">release</span></code>。</p>
</div>
<p>尽管运行效率会差一点，但避免了意外删除 <code class="docutils literal"><span class="pre">release</span></code> 或者插入 <code class="docutils literal"><span class="pre">return</span></code> 语句而导致内存泄露的可能。例如：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="c1">// AVOID (unless you have a compelling performance reason)</span>
<span class="n">MyController</span><span class="o">*</span> <span class="n">controller</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="c1">// ... code here that might return ...</span>
<span class="p">[</span><span class="n">controller</span> <span class="k">release</span><span class="p">];</span>

<span class="c1">// BETTER</span>
<span class="n">MyController</span><span class="o">*</span> <span class="n">controller</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">MyController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</pre></div>
</div>
</div>
<div class="section" id="autorelease-retain">
<h2><code class="docutils literal"><span class="pre">autorelease</span></code> 优先 <code class="docutils literal"><span class="pre">retain</span></code> 其次</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">给对象赋值时遵守 <code class="docutils literal"><span class="pre">autorelease``之后</span> <span class="pre">``retain</span></code> 的模式。</p>
</div>
<p>当给一个变量赋值新的对象时，必须先释放掉旧的对象以避免内存泄露。有很多 “正确的” 方法可以处理这种情况。我们则选择 “<code class="docutils literal"><span class="pre">autorelease</span></code> 之后 <code class="docutils literal"><span class="pre">retain</span></code>” 的方法，因为事实证明它不容易出错。注意大的循环会填满 <code class="docutils literal"><span class="pre">autorelease</span></code> 池，并且可能效率上会差一点，但权衡之下我们认为是可以接受的。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFoo:</span><span class="p">(</span><span class="n">GMFoo</span> <span class="o">*</span><span class="p">)</span><span class="nv">aFoo</span> <span class="p">{</span>
  <span class="p">[</span><span class="n">foo_</span> <span class="n">autorelease</span><span class="p">];</span>  <span class="c1">// Won't dealloc if |foo_| == |aFoo|</span>
  <span class="n">foo_</span> <span class="o">=</span> <span class="p">[</span><span class="n">aFoo</span> <span class="k">retain</span><span class="p">];</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="init-dealloc">
<h2><code class="docutils literal"><span class="pre">init</span></code> 和 <code class="docutils literal"><span class="pre">dealloc</span></code> 内避免使用访问器</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">在 <code class="docutils literal"><span class="pre">init</span></code> 和 <code class="docutils literal"><span class="pre">dealloc</span></code> 方法执行的过程中，子类可能会处在一个不一致的状态，所以这些方法中的代码应避免调用访问器。</p>
</div>
<p>子类尚未初始化，或在 <code class="docutils literal"><span class="pre">init</span></code> 和 <code class="docutils literal"><span class="pre">dealloc</span></code> 方法执行时已经被销毁，会使访问器方法很可能不可靠。实际上，应在这些方法中直接对 ivals 进行赋值或释放操作。</p>
<p>正确：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
  <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bar_</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSMutableString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>  <span class="c1">// good</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span> <span class="p">{</span>
  <span class="p">[</span><span class="n">bar_</span> <span class="k">release</span><span class="p">];</span>                           <span class="c1">// good</span>
  <span class="p">[</span><span class="nb">super</span> <span class="n">dealloc</span><span class="p">];</span>
<span class="p">}</span>
</pre></div>
</div>
<p>错误：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
  <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">self</span><span class="p">.</span><span class="n">bar</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableString</span> <span class="n">string</span><span class="p">];</span>  <span class="c1">// avoid</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span> <span class="p">{</span>
  <span class="nb">self</span><span class="p">.</span><span class="n">bar</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>                         <span class="c1">// avoid</span>
  <span class="p">[</span><span class="nb">super</span> <span class="n">dealloc</span><span class="p">];</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="id6">
<h2>按声明顺序销毁实例变量</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><code class="docutils literal"><span class="pre">dealloc</span></code> 中实例变量被释放的顺序应该与它们在 <code class="docutils literal"><span class="pre">@interface</span></code> 中声明的顺序一致，这有助于代码审查。</p>
</div>
<p>代码审查者在评审新的或者修改过的 <code class="docutils literal"><span class="pre">dealloc</span></code> 实现时，需要保证每个 <code class="docutils literal"><span class="pre">retained</span></code> 的实例变量都得到了释放。</p>
<p>为了简化 <code class="docutils literal"><span class="pre">dealloc</span></code> 的审查，<code class="docutils literal"><span class="pre">retained</span></code> 实例变量被释放的顺序应该与他们在 <code class="docutils literal"><span class="pre">@interface</span></code> 中声明的顺序一致。如果 <code class="docutils literal"><span class="pre">dealloc</span></code> 调用了其它方法释放成员变量，添加注释解释这些方法释放了哪些实例变量。</p>
</div>
<div class="section" id="setter-nsstrings">
<h2><code class="docutils literal"><span class="pre">setter</span></code> 应复制 NSStrings</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">接受 <code class="docutils literal"><span class="pre">NSString</span></code> 作为参数的 <code class="docutils literal"><span class="pre">setter</span></code>，应该总是 <code class="docutils literal"><span class="pre">copy</span></code> 传入的字符串。</p>
</div>
<p>永远不要仅仅 <code class="docutils literal"><span class="pre">retain</span></code> 一个字符串。因为调用者很可能在你不知情的情况下修改了字符串。不要假定别人不会修改，你接受的对象是一个 <code class="docutils literal"><span class="pre">NSString</span></code> 对象而不是 <code class="docutils literal"><span class="pre">NSMutableString</span></code> 对象。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFoo:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">aFoo</span> <span class="p">{</span>
  <span class="p">[</span><span class="n">foo_</span> <span class="n">autorelease</span><span class="p">];</span>
  <span class="n">foo_</span> <span class="o">=</span> <span class="p">[</span><span class="n">aFoo</span> <span class="k">copy</span><span class="p">];</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="avoid-throwing-exceptions">
<span id="id7"></span><h2>避免抛异常</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">不要 <code class="docutils literal"><span class="pre">@throw</span></code> Objective-C 异常，同时也要时刻准备捕获从第三方或 OS 代码中抛出的异常。</p>
</div>
<p>我们的确允许 <code class="docutils literal"><span class="pre">-fobjc-exceptions</span></code> 编译开关（主要因为我们要用到 <code class="docutils literal"><span class="pre">@synchronized</span></code> ），但我们不使用 <code class="docutils literal"><span class="pre">@throw</span></code>。为了合理使用第三方的代码，<code class="docutils literal"><span class="pre">@try</span></code>、<code class="docutils literal"><span class="pre">@catch</span></code> 和 <code class="docutils literal"><span class="pre">@finally</span></code> 是允许的。如果你确实使用了异常，请明确注释你期望什么方法抛出异常。</p>
<p>不要使用 <code class="docutils literal"><span class="pre">NS_DURING</span></code>、<code class="docutils literal"><span class="pre">NS_HANDLER</span></code>、<code class="docutils literal"><span class="pre">NS_ENDHANDLER</span></code>、<code class="docutils literal"><span class="pre">NS_VALUERETURN</span></code> 和 <code class="docutils literal"><span class="pre">NS_VOIDRETURN</span></code> 宏，除非你写的代码需要在 Mac OS X 10.2 或之前的操作系统中运行。</p>
<p>注意：如果抛出 Objective-C 异常，Objective-C++ 代码中基于栈的对象不会被销毁。比如：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="n">exceptiontest</span> <span class="p">{</span>
 <span class="nl">public</span><span class="p">:</span>
  <span class="n">exceptiontest</span><span class="p">()</span> <span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Created"</span><span class="p">);</span> <span class="p">}</span>
  <span class="o">~</span><span class="n">exceptiontest</span><span class="p">()</span> <span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Destroyed"</span><span class="p">);</span> <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">exceptiontest</span> <span class="n">a</span><span class="p">;</span>
  <span class="bp">NSException</span> <span class="o">*</span><span class="n">exception</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSException</span> <span class="nl">exceptionWithName</span><span class="p">:</span><span class="s">@"foo"</span>
                                                   <span class="nl">reason</span><span class="p">:</span><span class="s">@"bar"</span>
                                                 <span class="nl">userInfo</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
  <span class="k">@throw</span> <span class="n">exception</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="n">GMAutoreleasePool</span> <span class="n">pool</span><span class="p">;</span>
  <span class="k">@try</span> <span class="p">{</span>
    <span class="n">foo</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">@catch</span><span class="p">(</span><span class="bp">NSException</span> <span class="o">*</span><span class="n">ex</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"exception raised"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>会输出：</p>
<p>注意：这里析构函数从未被调用。这主要会影响基于栈的 <code class="docutils literal"><span class="pre">smartptr</span></code>，比如 <code class="docutils literal"><span class="pre">shared_ptr</span></code>、<code class="docutils literal"><span class="pre">linked_ptr</span></code>，以及所有你可能用到的 STL 对象。因此我们不得不痛苦的说，如果必须在 Objective-C++ 中使用异常，就只用 C++ 的异常机制。永远不应该重新抛出 Objective-C 异常，也不应该在 <code class="docutils literal"><span class="pre">@try</span></code>、<code class="docutils literal"><span class="pre">@catch</span></code> 或 <code class="docutils literal"><span class="pre">@finally</span></code> 语句块中使用基于栈的 C++ 对象。</p>
</div>
<div class="section" id="nil">
<h2>nil 检查</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><code class="docutils literal"><span class="pre">nil</span></code> 检查只用在逻辑流程中。</p>
</div>
<p>使用 <code class="docutils literal"><span class="pre">nil</span></code> 的检查来检查应用程序的逻辑流程，而不是避免崩溃。Objective-C 运行时会处理向 <code class="docutils literal"><span class="pre">nil</span></code> 对象发送消息的情况。如果方法没有返回值，就没关系。如果有返回值，可能由于运行时架构、返回值类型以及 OS X 版本的不同而不同，参见 <a class="reference external" href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/chapter_2_section_3.html">Apple’s documentation</a> 。</p>
<p>注意，这和 C/C++ 中检查指针是否为 ‵‵NULL`` 很不一样，C/C++ 运行时不做任何检查，从而导致应用程序崩溃。因此你仍然需要保证你不会对一个 C/C++ 的空指针解引用。</p>
</div>
<div class="section" id="bool">
<h2>BOOL 若干陷阱</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">将普通整形转换成 <code class="docutils literal"><span class="pre">BOOL</span></code> 时要小心。不要直接将 <code class="docutils literal"><span class="pre">BOOL</span></code> 值与 <code class="docutils literal"><span class="pre">YES</span></code> 进行比较。</p>
</div>
<p>Ojbective-C 中把 <code class="docutils literal"><span class="pre">BOOL</span></code> 定义成无符号字符型，这意味着 <code class="docutils literal"><span class="pre">BOOL</span></code> 类型的值远不止 <code class="docutils literal"><span class="pre">YES``(1)或</span> <span class="pre">``NO``(0)。不要直接把整形转换成</span> <span class="pre">``BOOL</span></code>。常见的错误包括将数组的大小、指针值及位运算的结果直接转换成 <code class="docutils literal"><span class="pre">BOOL</span></code> ，取决于整型结果的最后一个字节，很可能会产生一个 <code class="docutils literal"><span class="pre">NO</span></code> 值。当转换整形至 <code class="docutils literal"><span class="pre">BOOL</span></code> 时，使用三目操作符来返回 <code class="docutils literal"><span class="pre">YES</span></code> 或者 <code class="docutils literal"><span class="pre">NO</span></code>。（译者注：读者可以试一下任意的 256 的整数的转换结果，如 256、512 …）</p>
<p>你可以安全在 <code class="docutils literal"><span class="pre">BOOL</span></code>、<code class="docutils literal"><span class="pre">_Bool</span></code> 以及 <code class="docutils literal"><span class="pre">bool</span></code> 之间转换（参见 C++ Std 4.7.4, 4.12 以及 C99 Std 6.3.1.2）。你不能安全在 <code class="docutils literal"><span class="pre">BOOL</span></code> 以及 <code class="docutils literal"><span class="pre">Boolean</span></code> 之间转换，因此请把 <code class="docutils literal"><span class="pre">Boolean</span></code> 当作一个普通整形，就像之前讨论的那样。但 Objective-C 的方法标识符中，只使用 <code class="docutils literal"><span class="pre">BOOL</span></code>。</p>
<p>对 <code class="docutils literal"><span class="pre">BOOL</span></code> 使用逻辑运算符（<code class="docutils literal"><span class="pre">&amp;&amp;</span></code>，<code class="docutils literal"><span class="pre">||</span></code> 和 <code class="docutils literal"><span class="pre">!</span></code>）是合法的，返回值也可以安全地转换成 <code class="docutils literal"><span class="pre">BOOL</span></code>，不需要使用三目操作符。</p>
<p>错误的用法：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isBold</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="n">fontTraits</span><span class="p">]</span> <span class="o">&amp;</span> <span class="n">NSFontBoldTrait</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isValid</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="n">stringValue</span><span class="p">];</span>
<span class="p">}</span>
</pre></div>
</div>
<p>正确的用法：</p>
<blockquote>
<div><div class="highlight-objc"><div class="highlight"><pre><span></span>
</pre></div>
</div>
<ul class="simple">
<li>(BOOL)isBold {
return ([self fontTraits] &amp; NSFontBoldTrait) ? YES : NO;</li>
</ul>
<p>}
- (BOOL)isValid {</p>
<blockquote>
<div>return [self stringValue] != nil;</div></blockquote>
<p>}
- (BOOL)isEnabled {</p>
<blockquote>
<div>return [self isValid] &amp;&amp; [self isBold];</div></blockquote>
<p>}</p>
</div></blockquote>
<p>同样，不要直接比较 <code class="docutils literal"><span class="pre">YES/NO</span></code> 和 <code class="docutils literal"><span class="pre">BOOL</span></code> 变量。不仅仅因为影响可读性，更重要的是结果可能与你想的不同。</p>
<p>错误的用法：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="kt">BOOL</span> <span class="n">great</span> <span class="o">=</span> <span class="p">[</span><span class="n">foo</span> <span class="n">isGreat</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">great</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span>
  <span class="c1">// ...be great!</span>
</pre></div>
</div>
<p>正确的用法：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="kt">BOOL</span> <span class="n">great</span> <span class="o">=</span> <span class="p">[</span><span class="n">foo</span> <span class="n">isGreat</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">great</span><span class="p">)</span>
  <span class="c1">// ...be great!</span>
</pre></div>
</div>
</div>
<div class="section" id="property">
<h2>属性（Property）</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">属性（Property）通常允许使用，但需要清楚的了解：属性（Property）是 Objective-C 2.0 的特性，会限制你的代码只能跑在 iPhone 和 Mac OS X 10.5 (Leopard) 及更高版本上。点引用只允许访问声明过的 <code class="docutils literal"><span class="pre">@property</span></code>。</p>
</div>
<div class="section" id="id8">
<h3>命名</h3>
<p>属性所关联的实例变量的命名必须遵守以下划线作为后缀的规则。属性的名字应该与成员变量去掉下划线后缀的名字一模一样。</p>
<p>使用 <code class="docutils literal"><span class="pre">@synthesize</span></code> 指示符来正确地重命名属性。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="k">@interface</span> <span class="bp">MyClass</span> : <span class="bp">NSObject</span> <span class="p">{</span>
 <span class="k">@private</span>
  <span class="bp">NSString</span> <span class="o">*</span><span class="n">name_</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@property</span><span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="bp">MyClass</span>
<span class="k">@synthesize</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name_</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
</div>
</div>
<div class="section" id="id9">
<h3>位置</h3>
<p>属性的声明必须紧靠着类接口中的实例变量语句块。属性的定义必须在 <code class="docutils literal"><span class="pre">@implementation</span></code> 的类定义的最上方。他们的缩进与包含他们的 <code class="docutils literal"><span class="pre">@interface</span></code> 以及 <code class="docutils literal"><span class="pre">@implementation</span></code> 语句一样。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="k">@interface</span> <span class="bp">MyClass</span> : <span class="bp">NSObject</span> <span class="p">{</span>
 <span class="k">@private</span>
  <span class="bp">NSString</span> <span class="o">*</span><span class="n">name_</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@property</span><span class="p">(</span><span class="k">copy</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="bp">MyClass</span>
<span class="k">@synthesize</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name_</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
<span class="p">...</span>
<span class="p">}</span>
<span class="k">@end</span>
</pre></div>
</div>
</div>
<div class="section" id="copy-attribute">
<h3>字符串应使用 <code class="docutils literal"><span class="pre">copy</span></code> 属性（Attribute）</h3>
<p>应总是用 <code class="docutils literal"><span class="pre">copy</span></code> 属性（attribute）声明 <code class="docutils literal"><span class="pre">NSString</span></code> 属性（property）。</p>
<p>从逻辑上，确保遵守 <code class="docutils literal"><span class="pre">NSString</span></code> 的 <code class="docutils literal"><span class="pre">setter</span></code> 必须使用 <code class="docutils literal"><span class="pre">copy</span></code> 而不是 <code class="docutils literal"><span class="pre">retain</span></code> 的原则。</p>
</div>
<div class="section" id="id10">
<h3>原子性</h3>
<p>一定要注意属性（property）的开销。缺省情况下，所有 <code class="docutils literal"><span class="pre">synthesize</span></code> 的 <code class="docutils literal"><span class="pre">setter</span></code> 和 <code class="docutils literal"><span class="pre">getter</span></code> 都是原子的。这会给每个 <code class="docutils literal"><span class="pre">get</span></code> 或者 <code class="docutils literal"><span class="pre">set</span></code> 带来一定的同步开销。将属性（property）声明为 <code class="docutils literal"><span class="pre">nonatomic</span></code>，除非你需要原子性。</p>
</div>
<div class="section" id="id11">
<h3>点引用</h3>
<p>点引用是地道的 Objective-C 2.0 风格。它被使用于简单的属性 <code class="docutils literal"><span class="pre">set</span></code>、<code class="docutils literal"><span class="pre">get</span></code> 操作，但不应该用它来调用对象的其它操作。</p>
<p>正确的做法：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="bp">NSString</span> <span class="o">*</span><span class="n">oldName</span> <span class="o">=</span> <span class="n">myObject</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
<span class="n">myObject</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@"Alice"</span><span class="p">;</span>
</pre></div>
</div>
<p>错误的做法：</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSArray</span> <span class="nl">arrayWithObject</span><span class="p">:</span><span class="s">@"hello"</span><span class="p">]</span> <span class="k">retain</span><span class="p">];</span>

<span class="n">NSUInteger</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>  <span class="c1">// not a property</span>
<span class="n">array</span><span class="p">.</span><span class="k">release</span><span class="p">;</span>                           <span class="c1">// not a property</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="id12">
<h2>没有实例变量的接口</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">没有声明任何实例变量的接口，应省略空花括号。</p>
</div>
<p>正确的做法：</p>
<blockquote>
<div>@interface MyClass : NSObject
// Does a lot of stuff
- (void)fooBarBam;
@end</div></blockquote>
<p>错误的做法：</p>
<blockquote>
<div>@interface MyClass : NSObject {
}
// Does a lot of stuff
- (void)fooBarBam;
@end</div></blockquote>
</div>
<div class="section" id="synthesize">
<h2>自动 <code class="docutils literal"><span class="pre">synthesize</span></code> 实例变量</h2>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">只运行在 iOS 下的代码，优先考虑使用自动 <code class="docutils literal"><span class="pre">synthesize</span></code> 实例变量。</p>
</div>
<p><code class="docutils literal"><span class="pre">synthesize</span></code> 实例变量时，使用 <code class="docutils literal"><span class="pre">@synthesize</span> <span class="pre">var</span> <span class="pre">=</span> <span class="pre">var_;</span></code> 防止原本想调用 <code class="docutils literal"><span class="pre">self.var</span> <span class="pre">=</span> <span class="pre">blah;</span></code> 却不慎写成了 <code class="docutils literal"><span class="pre">var</span> <span class="pre">=</span> <span class="pre">blah;</span></code>。</p>
<p>不要synthesize CFType的属性 CFType应该永远使用@dynamic实现指示符。 尽管CFType不能使用retain属性特性，开发者必须自己处理retain和release。很少有情况你需要仅仅对它进行赋值，因此最好显示地实现getter和setter，并作出注释说明。 列出所有的实现指示符 尽管@dynamic是默认的，显示列出它以及其它的实现指示符会提高可读性，代码阅读者可以一眼就知道类的每个属性是如何实现的。</p>
<div class="highlight-objc"><div class="highlight"><pre><span></span><span class="c1">// Header file</span>
<span class="k">@interface</span> <span class="nc">Foo</span> : <span class="bp">NSObject</span>
<span class="c1">// A guy walks into a bar.</span>
<span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">bar</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// Implementation file</span>
<span class="k">@interface</span> <span class="nc">Foo</span> <span class="p">()</span>
<span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">baz</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Foo</span>
<span class="k">@synthesize</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">bar_</span><span class="p">;</span>
<span class="k">@synthesize</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">baz_</span><span class="p">;</span>
<span class="k">@end</span>
</pre></div>
</div>
</div>
</div>


           </div>
          </div>
          <footer>
  
    <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation">
      
        <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/patterns/" class="btn btn-neutral float-right" title="Cocoa 模式" accesskey="n">Next <span class="fa fa-arrow-circle-right"></span></a>
      
      
        <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/comments/" class="btn btn-neutral" title="注释" accesskey="p"><span class="fa fa-arrow-circle-left"></span> Previous</a>
      
    </div>
  

  <hr>

  <div role="contentinfo">
    <p>
        © Copyright .
      
        <span class="commit">
          Revision <code>410dda9c</code>.
        </span>
      

    </p>
  </div>
  Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org/">Read the Docs</a>. 

</footer>

        </div>
      </div>

    </section>

  </div>
  

  <div class="rst-versions" data-toggle="rst-versions" role="note" aria-label="versions">
    <span class="rst-current-version" data-toggle="rst-current-version">
      <span class="fa fa-book"> Read the Docs</span>
      v: latest
      <span class="fa fa-caret-down"></span>
    </span>
    <div class="rst-other-versions"><!-- Inserted RTD Footer -->
<div class="injected">

  

      
      
      
      <dl>
        <dt>Versions</dt>
        
         <strong> 
        <dd><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-objc-styleguide/features/">latest</a></dd>
         </strong> 
        
      </dl>
      
      

      
      
      <dl>
        <dt>Downloads</dt>
        
        <dd><a href="http://readthedocs.org/projects/zh-google-styleguide/downloads/pdf/latest/">PDF</a></dd>
        
        <dd><a href="http://readthedocs.org/projects/zh-google-styleguide/downloads/htmlzip/latest/">HTML</a></dd>
        
        <dd><a href="http://readthedocs.org/projects/zh-google-styleguide/downloads/epub/latest/">Epub</a></dd>
        
      </dl>
      
      

      
      <dl>
        <!-- These are kept as relative links for internal installs that are http -->
        <dt>On Read the Docs</dt>
        <dd>
          <a href="http://readthedocs.org/projects/zh-google-styleguide/">Project Home</a>
        </dd>
        <dd>
          <a href="http://readthedocs.org/projects/zh-google-styleguide/builds/">Builds</a>
        </dd>
        <dd>
          <a href="http://readthedocs.org/projects/zh-google-styleguide/downloads/">Downloads</a>
        </dd>
      </dl>
      

      

      
      <dl>
        <dt>On GitHub</dt>
        <dd>
          <a href="https://github.com/zh-google-styleguide/zh-google-styleguide/blob/master/google-objc-styleguide/features.rst">View</a>
        </dd>
        <dd>
          <a href="https://github.com/zh-google-styleguide/zh-google-styleguide/edit/master/google-objc-styleguide/features.rst">Edit</a>
        </dd>
      </dl>
      
      

      
      <dl>
        <dt>Search</dt>
        <dd>
          <div style="padding: 6px;">
            <form id="flyout-search-form" class="wy-form" target="_blank" action="https://readthedocs.org/projects/zh-google-styleguide/search/" method="get">
              <input type="text" name="q" placeholder="Search docs">
              </form>
          </div>
        </dd>
      </dl>
      



      <hr>
      
      Free document hosting provided by <a href="https://readthedocs.org/">Read the Docs</a>. 
      

      

</div>
</div>
  </div>



  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../../',
            VERSION:'',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'',
            HAS_SOURCE:  true
        };
    </script>
      <script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/jquery-2.0.3.min.js"></script>
      <script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/jquery-migrate-1.2.1.min.js"></script>
      <script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/underscore.js"></script>
      <script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/doctools.js"></script>
      <script type="text/javascript" src="./Cocoa 和 Objective-C 特性 — Google 开源项目风格指南_files/readthedocs-doc-embed.js"></script>

  

  
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   


</body></html>