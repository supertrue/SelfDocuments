<!DOCTYPE html>
<!-- saved from url=(0029)https://objccn.io/issue-19-2/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
        <title>ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹</title>
        
        
        <!-- Latest compiled and minified CSS -->
        <link href="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/bootstrap.min.css" rel="stylesheet">
        
        <link rel="stylesheet" href="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/bootstrap-flat.min.css">
        <link rel="shortcut icon" href="https://objccn.io/assets/images/favicon.png">
        
        <link rel="stylesheet" href="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/style.css">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        
        <script async="" src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/analytics.js"></script><script>
          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
        
          ga('create', 'UA-49045539-1', 'auto');
          ga('send', 'pageview');
        
        </script>
    </head>
    <body>
        <div id="__wrapper">
            <header>
            <nav class="navbar navbar-default">
              <div class="container">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                  <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse" aria-expanded="false">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                  </button>
                  <a class="navbar-brand" href="https://objccn.io/">[@] ObjC 中国</a>
                </div>
            
                <div class="collapse navbar-collapse" id="navbar-collapse">
                  <ul class="nav navbar-nav">
                    <li class="active"><a href="https://objccn.io/issues/">期刊</a></li>
                    <li><a href="https://objccn.io/products/">书籍</a></li> 
                  </ul>
            
                   <ul class="nav navbar-nav navbar-right">
                      <li><a href="https://objccn.io/login/"><span class="glyphicon glyphicon-log-in"></span> 登录</a></li>
                  </ul> 
            
                </div>
              </div>
            </nav>
            </header>
            <main class="container">
            <div class="article article-container">
    <div class="article-header">
        <div class="article-header-top row">
            <div class="col-xs-6 col-xs-offset-0">
                <a class="article-back" href="https://objccn.io/issues/"><span class="glyphicon glyphicon-menu-left"></span> 返回期刊列表</a>
            </div>
        </div>
        <div>
            <div class="article-title">与调试器共舞 - LLDB 的华尔兹</div>
            <div class="article-meta text-center">
                <div class="article-meta-item"><span class="glyphicon glyphicon-user"></span> <a href="https://github.com/nangege">nangege</a></div>
                <div class="article-meta-item"><span class="glyphicon glyphicon-calendar"></span> 2014/12/19</div>
            </div>
        </div>
    </div>
    <hr>
    <div class="article-content">
        <p>你是否曾经苦恼于理解你的代码，而去尝试打印一个变量的值？</p>
<pre><code class="hljs objectivec"><span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%@"</span>, whatIsInsideThisThing);
</code></pre><p>或者跳过一个函数调用来简化程序的行为？</p>
<pre><code class="hljs ruby">NSNumber *n = @7; <span class="hljs-regexp">//</span> 实际应该调用这个函数：Foo();
</code></pre><p>或者短路一个逻辑检查？</p>
<pre><code class="hljs ruby"><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> <span class="hljs-params">||</span> theBooleanAtStake) { ... }
</code></pre><p>或者伪造一个函数实现？</p>
<pre><code class="hljs java"><span class="hljs-keyword">int</span> calculateTheTrickyValue {
  <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;

  <span class="hljs-comment">/*
   先这么着
   ...
}
</span></code></pre><p>并且每次必须重新编译，从头开始？</p>
<p>构建软件是复杂的，并且 Bug 总会出现。一个常见的修复周期就是修改代码，编译，重新运行，并且祈祷出现最好的结果。</p>
<p>但是不一定要这么做。你可以使用调试器。而且即使你已经知道如何使用调试器检查变量，它可以做的还有很多。</p>
<p>这篇文章将试图挑战你对调试的认知，并详细地解释一些你可能还不了解的基本原理，然后展示一系列有趣的例子。现在就让我们开始与调试器共舞一曲华尔兹，看看最后能达到怎样的高度。</p>
<h2 id="lldb">LLDB</h2>
<p><a href="http://lldb.llvm.org/">LLDB</a> 是一个有着 REPL 的特性和 C++ ,Python 插件的<a href="http://lldb.llvm.org/source.html">开源</a>调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。(<a href="http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1.html">这里</a>有一个关于调试器如何工作的总体的解释。)</p>
<p>你以前有可能已经使用过调试器，即使只是在 Xcode 的界面上加一些断点。但是通过一些小的技巧，你就可以做一些非常酷的事情。<a href="http://lldb.llvm.org/lldb-gdb.html">GDB to LLDB</a> 参考是一个非常好的调试器可用命令的总览。你也可以安装 <a href="https://github.com/facebook/chisel">Chisel</a>，它是一个开源的 LLDB 插件合辑，这会使调试变得更加有趣。</p>
<p>与此同时，让我们以在调试器中打印变量来开始我们的旅程吧。</p>
<h2 id="-">基础</h2>
<p>这里有一个简单的小程序，它会打印一个字符串。注意断点已经被加在第 8 行。断点可以通过点击 Xcode 的源码窗口的侧边槽进行创建。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-20_at_10.01.46_PM.png" width="400"></p>
<p>程序会在这一行停止运行，并且控制台会被打开，允许我们和调试器交互。那我们应该打些什么呢？</p>
<h3 id="_help_"><em>help</em></h3>
<p>最简单命令是 <code>help</code>，它会列举出所有的命令。如果你忘记了一个命令是做什么的，或者想知道更多的话，你可以通过 <code>help &lt;command&gt;</code> 来了解更多细节，例如 <code>help print</code> 或者 <code>help thread</code>。如果你甚至忘记了 <code>help</code> 命令是做什么的，你可以试试 <code>help help</code>。不过你如果知道这么做，那就说明你大概还没有忘光这个命令。😛</p>
<h3 id="_print_"><em>print</em></h3>
<p>打印值很简单；只要试试 <code>print</code> 命令:</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-20_at_10.09.38_PM.png" width="600"></p>
<p>LLDB 实际上会作前缀匹配。所以你也可以使用 <code>prin</code>，<code>pri</code>，或者 <code>p</code>。但你不能使用 <code>pr</code>，因为 LLDB 不能消除和 <code>process</code> 的歧义 (幸运的是 <code>p</code> 并没有歧义)。</p>
<p>你可能还注意到了，结果中有个 <code>$0</code>。实际上你可以使用它来指向这个结果。试试 <code>print $0 + 7</code>，你会看到 <code>106</code>。任何以美元符开头的东西都是存在于 LLDB 的命名空间的，它们是为了帮助你进行调试而存在的。</p>
<h3 id="_expression_"><em>expression</em></h3>
<p>如果想改变一个值怎么办？你或许会猜 <em>modify</em>。其实这时候我们要用到的是 <code>expression</code> 这个方便的命令。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-20_at_10.15.01_PM.png" width="240"></p>
<p>这不仅会改变调试器中的值，实际上它改变了程序中的值。这时候继续执行程序，将会打印 <code>42 red balloons</code>。神奇吧。</p>
<p>注意，从现在开始，我们将会偷懒分别以 <code>p</code> 和 <code>e</code> 来代替 <code>print</code> 和 <code>expression</code>。</p>
<h3 id="-_print_-">什么是 <em>print</em> 命令</h3>
<p>考虑一个有意思的表达式：<code>p count = 18</code>。如果我们运行这条命令，然后打印 <code>count</code> 的内容。我们将看到它的结果与 <code>expression count = 18</code> 一样。</p>
<p>和 <code>expression</code> 不同的是，<code>print</code> 命令不需要参数。比如 <code>e -h +17</code> 中，你很难区分到底是以 <code>-h</code> 为标识，仅仅执行 <code>+17</code> 呢，还是要计算 <code>17</code> 和 <code>h</code> 的差值。连字符号确实很让人困惑，你或许得不到自己想要的结果。</p>
<p>幸运的是，解决方案很简单。用 <code>--</code> 来表征标识的结束，以及输入的开始。如果想要 <code>-h</code> 作为标识，就用 <code>e -h -- +17</code>，如果想计算它们的差值，就使用 <code>e -- -h +17</code>。因为一般来说不使用标识的情况比较多，所以 <code>e --</code> 就有了一个简写的方式，那就是 <code>print</code>。</p>
<p>输入 <code>help print</code>，然后向下滚动，你会发现：</p>
<pre><code class="hljs ruby"><span class="hljs-string">'print'</span> is an abbreviation <span class="hljs-keyword">for</span> <span class="hljs-string">'expression --'</span>.   
(print是 <span class="hljs-string">`expression --`</span> 的缩写)
</code></pre><h3 id="-">打印对象</h3>
<p>尝试输入</p>
<pre><code class="hljs">p objects
</code></pre><p>输出会有点啰嗦</p>
<pre><code class="hljs ruby">(NSString *) $7 = <span class="hljs-number">0x0000000104da4040</span> @<span class="hljs-string">"red balloons"</span>
</code></pre><p>如果我们尝试打印结构更复杂的对象，结果甚至会更糟</p>
<pre><code class="hljs ruby">(lldb) p @[ @<span class="hljs-string">"foo"</span>, @<span class="hljs-string">"bar"</span> ]

(NSArray *) $8 = <span class="hljs-number">0x00007fdb9b71b3e0</span> @<span class="hljs-string">"2 objects"</span> 
</code></pre><p>实际上，我们想看的是对象的 <code>description</code> 方法的结果。我么需要使用 <code>-O</code> (字母 O，而不是数字 0) 标志告诉 <code>expression</code> 命令以 <code>对象</code> (Object) 的方式来打印结果。 </p>
<pre><code class="hljs ruby">(lldb) e -O -- $8
&lt;__NSArrayI <span class="hljs-number">0x7fdb9b71b3e0</span>&gt;(
foo,
bar
)
</code></pre><p>幸运的是，<code>e -o --</code> 有也有个别名，那就是 <code>po</code> (<strong>p</strong>rint <strong>o</strong>bject 的缩写)，我们可以使用它来进行简化：</p>
<pre><code class="hljs ruby">(lldb) po $8
&lt;__NSArrayI <span class="hljs-number">0x7fdb9b71b3e0</span>&gt;(
foo,
bar
)
(lldb) po @<span class="hljs-string">"lunar"</span>
lunar
(lldb) p @<span class="hljs-string">"lunar"</span>
(NSString *) $13 = <span class="hljs-number">0x00007fdb9d0003b0</span> @<span class="hljs-string">"lunar"</span>
</code></pre><h3 id="-">打印变量</h3>
<p>可以给 <code>print</code> 指定不同的打印格式。它们都是以 <code>print/&lt;fmt&gt;</code> 或者简化的 <code>p/&lt;fmt&gt;</code> 格式书写。下面是一些例子：</p>
<p>默认的格式</p>
<pre><code class="hljs">(lldb) p 16
16
</code></pre><p>十六进制:</p>
<pre><code class="hljs">(lldb) p/x 16
0x10
</code></pre><p>二进制 (<code>t</code> 代表 <strong>t</strong>wo)：</p>
<pre><code class="hljs java">(lldb) p/t <span class="hljs-number">16</span>
<span class="hljs-number">0b00000000000000000000000000010000</span>
(lldb) p/t (<span class="hljs-keyword">char</span>)<span class="hljs-number">16</span>
<span class="hljs-number">0b00010000</span>
</code></pre><p>你也可以使用 <code>p/c</code> 打印字符，或者 <code>p/s</code> 打印以空终止的字符串 (译者注：以 '\0' 结尾的字符串)。<br><a href="https://sourceware.org/gdb/onlinedocs/gdb/Output-Formats.html">这里</a>是格式的完整清单。</p>
<h3 id="-">变量</h3>
<p>现在你已经可以打印对象和简单类型，并且知道如何使用 <code>expression</code> 命令在调试器中修改它们了。现在让我们使用一些变量来减少输入量。就像你可以在 C 语言中用 <code>int a = 0</code> 来声明一个变量一样，你也可以在 LLDB 中做同样的事情。不过为了能使用声明的变量，变量<strong>必须</strong>以美元符开头。</p>
<pre><code class="hljs ruby">(lldb) e int $a = <span class="hljs-number">2</span>
(lldb) p $a * <span class="hljs-number">19</span>
<span class="hljs-number">38</span>
(lldb) e NSArray *$array = @[ @<span class="hljs-string">"Saturday"</span>, @<span class="hljs-string">"Sunday"</span>, @<span class="hljs-string">"Monday"</span> ]
(lldb) p [$array count]
<span class="hljs-number">2</span>
(lldb) po [[$array <span class="hljs-symbol">objectAtIndex:</span><span class="hljs-number">0</span>] uppercaseString]
SATURDAY
(lldb) p [[$array <span class="hljs-symbol">objectAtIndex:</span>$a] <span class="hljs-symbol">characterAtIndex:</span><span class="hljs-number">0</span>]
<span class="hljs-symbol">error:</span> no known method <span class="hljs-string">'-characterAtIndex:'</span>; cast the message send to the method<span class="hljs-string">'s return type
error: 1 errors parsing expression
</span></code></pre><p>悲剧了，LLDB 无法确定涉及的类型 (译者注：返回的类型)。这种事情常常发生，给个说明就好了：</p>
<pre><code class="hljs ruby">(lldb) p (char)[[$array <span class="hljs-symbol">objectAtIndex:</span>$a] <span class="hljs-symbol">characterAtIndex:</span><span class="hljs-number">0</span>]
<span class="hljs-string">'M'</span>
(lldb) p/d (char)[[$array <span class="hljs-symbol">objectAtIndex:</span>$a] <span class="hljs-symbol">characterAtIndex:</span><span class="hljs-number">0</span>]
<span class="hljs-number">77</span>
</code></pre><p>变量使调试器变的容易使用得多，想不到吧？😉</p>
<h3 id="-">流程控制</h3>
<p>当你通过 Xcode 的源码编辑器的侧边槽 (或者通过下面的方法) 插入一个断点，程序到达断点时会就会停止运行。</p>
<p>调试条上会出现四个你可以用来控制程序的执行流程的按钮。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_10.37.45_AM.png" width="200"></p>
<p>从左到右，四个按钮分别是：continue，step over，step into，step out。</p>
<p>第一个，continue 按钮，会取消程序的暂停，允许程序正常执行 (要么一直执行下去，要么到达下一个断点)。在 LLDB 中，你可以使用 <code>process continue</code> 命令来达到同样的效果，它的别名为 <code>continue</code>，或者也可以缩写为 <code>c</code>。</p>
<p>第二个，step over 按钮，会以黑盒的方式执行一行代码。如果所在这行代码是一个函数调用，那么就<strong>不会</strong>跳进这个函数，而是会执行这个函数，然后继续。LLDB 则可以使用 <code>thread step-over</code>，<code>next</code>，或者 <code>n</code> 命令。</p>
<p>如果你确实想跳进一个函数调用来调试或者检查程序的执行情况，那就用第三个按钮，step in，或者在LLDB中使用 <code>thread step in</code>，<code>step</code>，或者 <code>s</code> 命令。注意，当前行不是函数调用时，<code>next</code> 和 <code>step</code> 效果是一样的。</p>
<p>大多数人知道 <code>c</code>，<code>n</code> 和 <code>s</code>，但是其实还有第四个按钮，step out。如果你曾经不小心跳进一个函数，但实际上你想跳过它，常见的反应是重复的运行 <code>n</code> 直到函数返回。其实这种情况，step out 按钮是你的救世主。它会继续执行到下一个返回语句 (直到一个堆栈帧结束) 然后再次停止。</p>
<h4 id="-">例子</h4>
<p>考虑下面一段程序：</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_10.53.52_AM.png" width="320"></p>
<p>假如我们运行程序，让它停止在断点，然后执行下面一些列命令：</p>
<pre><code class="hljs">p i
n
s
p i
finish
p i
frame info
</code></pre><p>这里，<code>frame info</code> 会告诉你当前的行数和源码文件，以及其他一些信息；查看 <code>help frame</code>，<code>help thread</code> 和 <code>help process</code> 来获得更多信息。这一串命令的结果会是什么？看答案之前请先想一想。</p>
<pre><code class="hljs ruby">(lldb) p i
(int) $0 = <span class="hljs-number">99</span>
(lldb) n
<span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span><span class="hljs-symbol">:</span><span class="hljs-number">26.445</span> DebuggerDance[<span class="hljs-number">60182</span><span class="hljs-symbol">:</span><span class="hljs-number">4832768</span>] <span class="hljs-number">101</span> is odd!
(lldb) s
(lldb) p i
(int) $2 = <span class="hljs-number">110</span>
(lldb) finish
<span class="hljs-number">2014</span>-<span class="hljs-number">11</span>-<span class="hljs-number">22</span> <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span><span class="hljs-symbol">:</span><span class="hljs-number">35.978</span> DebuggerDance[<span class="hljs-number">60182</span><span class="hljs-symbol">:</span><span class="hljs-number">4832768</span>] <span class="hljs-number">110</span> is even!
(lldb) p i
(int) $4 = <span class="hljs-number">99</span>
(lldb) frame info
frame <span class="hljs-comment">#0: 0x000000010a53bcd4 DebuggerDance`main + 68 at main.m:17</span>
</code></pre><p>它始终在 17 行的原因是 <code>finish</code> 命令一直运行到 <code>isEven()</code> 函数的 <code>return</code>，然后立刻停止。注意即使它还在 17 行，其实这行已经被执行过了。</p>
<h4 id="thread-return">Thread Return</h4>
<p>调试时，还有一个很棒的函数可以用来控制程序流程：<code>thread return</code> 。它有一个可选参数，在执行时它会把可选参数加载进返回寄存器里，然后立刻执行返回命令，跳出当前栈帧。这意味这函数剩余的部分<strong>不会被执行</strong>。这会给 ARC 的引用计数造成一些问题，或者会使函数内的清理部分失效。但是在函数的开头执行这个命令，是个非常好的隔离这个函数，伪造返回值的方式 。</p>
<p>让我们稍微修改一下上面代码段并运行：</p>
<pre><code class="hljs objectivec">p i
s
thread <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>
n
p even0
frame info
</code></pre><p>看答案前思考一下。下面是答案：</p>
<pre><code class="hljs objectivec">(lldb) p i
(<span class="hljs-keyword">int</span>) $<span class="hljs-number">0</span> = <span class="hljs-number">99</span>
(lldb) s
(lldb) thread <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>
(lldb) n
(lldb) p even0
(<span class="hljs-built_in">BOOL</span>) $<span class="hljs-number">2</span> = <span class="hljs-literal">NO</span>
(lldb) frame info
frame <span class="hljs-meta">#0: 0x00000001009a5cc4 DebuggerDance`main + 52 at main.m:17</span>
</code></pre><h2 id="-">断点</h2>
<p>我们都把断点作为一个停止程序运行，检查当前状态，追踪 bug 的方式。但是如果我们改变和断点交互的方式，很多事情都变成可能。</p>
<blockquote>
<p>断点允许控制程序什么时候停止，然后允许命令的运行。</p>
</blockquote>
<p>想象把断点放在函数的开头，然后用 <code>thread return</code> 命令重写函数的行为，然后继续。想象一下让这个过程自动化，听起来不错，不是吗？</p>
<h3 id="-">管理断点</h3>
<p>Xcode 提供了一系列工具来创建和管理断点。我们会一个个看过来并介绍 LLDB 中等价的命令 (是的，你可以在调试器<strong>内部</strong>添加断点)。</p>
<p>在 Xcode 的左侧面板，有一组按钮。其中一个看起来像断点。点击它打开断点导航，这是一个可以快速管理所有断点的面板。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_11.38.24_AM.png" width="620"></p>
<p>在这里你可以看到所有的断点 - 在 LLDB 中通过 <code>breakpoint list</code> (或者 <code>br li</code>) 命令也做同样的事儿。你也可以点击单个断点来开启或关闭 - 在 LLDB 中使用 <code>breakpoint enable &lt;breakpointID&gt;</code> 和 <code>breakpoint disable &lt;breakpointID&gt;</code>：</p>
<pre><code class="hljs swift">(lldb) br li
<span class="hljs-type">Current</span> breakpoints:
<span class="hljs-number">1</span>: file = '/<span class="hljs-type">Users</span>/arig/<span class="hljs-type">Desktop</span>/<span class="hljs-type">DebuggerDance</span>/<span class="hljs-type">DebuggerDance</span>/main.m', line = <span class="hljs-number">16</span>, locations = <span class="hljs-number">1</span>, resolved = <span class="hljs-number">1</span>, hit <span class="hljs-built_in">count</span> = <span class="hljs-number">1</span>

  <span class="hljs-number">1.1</span>: <span class="hljs-keyword">where</span> = <span class="hljs-type">DebuggerDance</span>`main + <span class="hljs-number">27</span> at main.m:<span class="hljs-number">16</span>, address = <span class="hljs-number">0x000000010a3f6cab</span>, resolved, hit <span class="hljs-built_in">count</span> = <span class="hljs-number">1</span>

(lldb) br dis <span class="hljs-number">1</span>
<span class="hljs-number">1</span> breakpoints disabled.
(lldb) br li
<span class="hljs-type">Current</span> breakpoints:
<span class="hljs-number">1</span>: file = '/<span class="hljs-type">Users</span>/arig/<span class="hljs-type">Desktop</span>/<span class="hljs-type">DebuggerDance</span>/<span class="hljs-type">DebuggerDance</span>/main.m', line = <span class="hljs-number">16</span>, locations = <span class="hljs-number">1</span> <span class="hljs-type">Options</span>: disabled

  <span class="hljs-number">1.1</span>: <span class="hljs-keyword">where</span> = <span class="hljs-type">DebuggerDance</span>`main + <span class="hljs-number">27</span> at main.m:<span class="hljs-number">16</span>, address = <span class="hljs-number">0x000000010a3f6cab</span>, unresolved, hit <span class="hljs-built_in">count</span> = <span class="hljs-number">1</span>

(lldb) br del <span class="hljs-number">1</span>
<span class="hljs-number">1</span> breakpoints deleted; <span class="hljs-number">0</span> breakpoint locations disabled.
(lldb) br li
<span class="hljs-type">No</span> breakpoints currently <span class="hljs-keyword">set</span>.
</code></pre><h3 id="-">创建断点</h3>
<p>在上面的例子中，我们通过在源码页面器的滚槽 <code>16</code> 上点击来创建断点。你可以通过把断点拖拽出滚槽，然后释放鼠标来删除断点 (消失时会有一个非常可爱的噗的一下的动画)。你也可以在断点导航页选择断点，然后按下删除键删除。</p>
<p>要在调试器中创建断点，可以使用 <code>breakpoint set</code> 命令。</p>
<pre><code class="hljs bash">(lldb) breakpoint <span class="hljs-built_in">set</span> <span class="hljs-_">-f</span> main.m <span class="hljs-_">-l</span> 16
Breakpoint 1: <span class="hljs-built_in">where</span> = DebuggerDance`main + 27 at main.m:16, address = 0x000000010a3f6cab
</code></pre><p>也可以使用缩写形式 <code>br</code>。虽然 <code>b</code> 是一个完全不同的命令 (<code>_regexp-break</code> 的缩写)，但恰好也可以实现和上面同样的效果。</p>
<pre><code class="hljs swift">(lldb) b main.m:<span class="hljs-number">17</span>
<span class="hljs-type">Breakpoint</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">where</span> = <span class="hljs-type">DebuggerDance</span>`main + <span class="hljs-number">52</span> at main.m:<span class="hljs-number">17</span>, address = <span class="hljs-number">0x000000010a3f6cc4</span>
</code></pre><p>也可以在一个符号 (C 语言函数) 上创建断点，而完全不用指定哪一行 </p>
<pre><code class="hljs swift">(lldb) b isEven
<span class="hljs-type">Breakpoint</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">where</span> = <span class="hljs-type">DebuggerDance</span>`isEven + <span class="hljs-number">16</span> at main.m:<span class="hljs-number">4</span>, address = <span class="hljs-number">0x000000010a3f6d00</span>
(lldb) br s -<span class="hljs-type">F</span> isEven
<span class="hljs-type">Breakpoint</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">where</span> = <span class="hljs-type">DebuggerDance</span>`isEven + <span class="hljs-number">16</span> at main.m:<span class="hljs-number">4</span>, address = <span class="hljs-number">0x000000010a3f6d00</span>
</code></pre><p>这些断点会准确的停止在函数的开始。Objective-C 的方法也完全可以：</p>
<pre><code class="hljs bash">(lldb) breakpoint <span class="hljs-built_in">set</span> -F <span class="hljs-string">"-[NSArray objectAtIndex:]"</span>
Breakpoint 5: <span class="hljs-built_in">where</span> = CoreFoundation`-[NSArray objectAtIndex:], address = 0x000000010ac7a950
(lldb) b -[NSArray objectAtIndex:]
Breakpoint 6: <span class="hljs-built_in">where</span> = CoreFoundation`-[NSArray objectAtIndex:], address = 0x000000010ac7a950
(lldb) breakpoint <span class="hljs-built_in">set</span> -F <span class="hljs-string">"+[NSSet setWithObject:]"</span>
Breakpoint 7: <span class="hljs-built_in">where</span> = CoreFoundation`+[NSSet <span class="hljs-built_in">set</span>WithObject:], address = 0x000000010abd3820
(lldb) b +[NSSet <span class="hljs-built_in">set</span>WithObject:]
Breakpoint 8: <span class="hljs-built_in">where</span> = CoreFoundation`+[NSSet <span class="hljs-built_in">set</span>WithObject:], address = 0x000000010abd3820
</code></pre><p>如果想在 Xcode 的UI上创建符号断点，你可以点击断点栏左侧的 <code>+</code> 按钮。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_11.52.50_AM.png" width="300"></p>
<p>然后选择第三个选项：</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_11.54.44_AM.png" width="430"></p>
<p>这时会出现一个弹出框，你可以在里面添加例如 <code>-[NSArray objectAtIndex:]</code> 这样的符号断点。这样<strong>每次</strong>调用这个函数的时候，程序都会停止，不管是你调用还是苹果调用。</p>
<p>如果你 Xcode 的 UI 上右击<strong>任意</strong>断点，然后选择 "Edit Breakpoint" 的话，会有一些非常诱人的选择。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_11.58.06_AM.png" width="570"></p>
<p>这里，断点已经被修改为<strong>只有</strong>当 <code>i</code> 是 <code>99</code> 的时候才会停止。你也可以使用 "ignore" 选项来告诉断点最初的 <code>n</code> 次调用 (并且条件为真的时候) 的时候不要停止。</p>
<p>接下来介绍 'Add Action' 按钮...</p>
<h3 id="-action-">断点行为 (Action)</h3>
<p>上面的例子中，你或许想知道每一次到达断点的时候 <code>i</code> 的值。我们可以使用 <code>p i</code> 作为断点行为。这样每次到达断点的时候，都会自动运行这个命令。</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Screen_Shot_2014-11-22_at_12.01.32_PM.png" width="600"></p>
<p>你也可以添加多个行为，可以是调试器命令，shell 命令，也可以是更直接的打印：</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Image_2014-11-22_at_12.06.34_PM.png" width="400"></p>
<p>可以看到它打印 <code>i</code>，然后大声念出那个句子，接着打印了自定义的表达式。</p>
<p>下面是在 LLDB 而不是 Xcode 的 UI 中做这些的时候，看起来的样子。</p>
<pre><code class="hljs bash">(lldb) breakpoint <span class="hljs-built_in">set</span> -F isEven
Breakpoint 1: <span class="hljs-built_in">where</span> = DebuggerDance`isEven + 16 at main.m:4, address = 0x00000001083b5d00
(lldb) breakpoint modify -c <span class="hljs-string">'i == 99'</span> 1
(lldb) breakpoint <span class="hljs-built_in">command</span> add 1
Enter your debugger <span class="hljs-built_in">command</span>(s).  Type <span class="hljs-string">'DONE'</span> to end.
&gt; p i
&gt; DONE
(lldb) br li 1
1: name = <span class="hljs-string">'isEven'</span>, locations = 1, resolved = 1, hit count = 0
    Breakpoint commands:
      p i

Condition: i == 99

  1.1: <span class="hljs-built_in">where</span> = DebuggerDance`isEven + 16 at main.m:4, address = 0x00000001083b5d00, resolved, hit count = 0 
</code></pre><p>接下来说说自动化。</p>
<h3 id="-">赋值后继续运行</h3>
<p>看编辑断点弹出窗口的底部，你还会看到一个选项： <em>"Automatically continue after evaluation actions."</em> 。它仅仅是一个选择框，但是却很强大。选中它，调试器会运行你所有的命令，然后继续运行。看起来就像没有执行任何断点一样 (除非断点太多，运行需要一段时间，拖慢了你的程序)。</p>
<p>这个选项框的效果和让最后断点的最后一个行为是 <code>continue</code> 一样。选框只是让这个操作变得更简单。调试器的输出是：</p>
<pre><code class="hljs bash">(lldb) breakpoint <span class="hljs-built_in">set</span> -F isEven
Breakpoint 1: <span class="hljs-built_in">where</span> = DebuggerDance`isEven + 16 at main.m:4, address = 0x00000001083b5d00
(lldb) breakpoint <span class="hljs-built_in">command</span> add 1
Enter your debugger <span class="hljs-built_in">command</span>(s).  Type <span class="hljs-string">'DONE'</span> to end.
&gt; <span class="hljs-built_in">continue</span>
&gt; DONE
(lldb) br li 1
1: name = <span class="hljs-string">'isEven'</span>, locations = 1, resolved = 1, hit count = 0
    Breakpoint commands:
      <span class="hljs-built_in">continue</span>

  1.1: <span class="hljs-built_in">where</span> = DebuggerDance`isEven + 16 at main.m:4, address = 0x00000001083b5d00, resolved, hit count = 0
</code></pre><p>执行断点后自动继续运行，允许你完全通过断点来修改程序！你可以在某一行停止，运行一个 <code>expression</code> 命令来改变变量，然后继续运行。</p>
<h4 id="-">例子</h4>
<p>想想所谓的"打印调试"技术吧，不要这么做：</p>
<pre><code class="hljs objectivec"><span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"%@"</span>, whatIsInsideThisThing);
</code></pre><p>而是用个打印变量的断点替换 log 语句，然后继续运行。</p>
<p>也不要：</p>
<pre><code class="hljs java"><span class="hljs-keyword">int</span> calculateTheTrickyValue {
  <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;

  <span class="hljs-comment">/*
   Figure this out later.
   ...
}
</span></code></pre><p>而是加一个使用 <code>thread return 9</code> 命令的断点，然后让它继续运行。</p>
<p>符号断点加上 action 真的很强大。你也可以在你朋友的 Xcode 工程上添加一些断点，并且加上大声朗读某些东西的 action。看看他们要花多久才能弄明白发生了什么。😄</p>
<h3 id="-">完全在调试器内运行</h3>
<p>在开始舞蹈之前，还有一件事要看一看。实际上你可以在调试器中执行任何 C/Objective-C/C++/Swift 的命令。唯一的缺点就是不能创建新函数... 这意味着不能创建新的类，block，函数，有虚拟函数的 C++ 类等等。除此之外，它都可以做。</p>
<p>我们可以申请分配一些字节：</p>
<pre><code class="hljs ruby">(lldb) e char *$str = (char *)malloc(<span class="hljs-number">8</span>)
(lldb) e (void)strcpy($str, <span class="hljs-string">"munkeys"</span>)
(lldb) e $str[<span class="hljs-number">1</span>] = <span class="hljs-string">'o'</span>
(char) $0 = <span class="hljs-string">'o'</span>
(lldb) p $str
(char *) $str = <span class="hljs-number">0x00007fd04a900040</span> <span class="hljs-string">"monkeys"</span>
</code></pre><p>我们可以查看内存 (使用 <code>x</code> 命令)，来看看新数组中的四个字节：</p>
<pre><code class="hljs ruby">(lldb) x/<span class="hljs-number">4</span>c $str
<span class="hljs-number">0x7fd04a900040</span>: monk
</code></pre><p>我们也可以去掉 3 个字节 (<code>x</code> 命令需要斜引号，因为它只有一个内存地址的参数，而不是表达式；使用 <code>help x</code> 来获得更多信息)：</p>
<pre><code class="hljs ruby">(lldb) x/<span class="hljs-number">1</span>w <span class="hljs-string">`$str + 3`</span>
<span class="hljs-number">0x7fd04a900043</span>: keys
</code></pre><p>做完了之后，一定不要忘了释放内存，这样才不会内存泄露。(哈，虽然这是调试器用到的内存)：</p>
<pre><code class="hljs java">(lldb) e (<span class="hljs-keyword">void</span>)free($str)
</code></pre><h2 id="-">让我们起舞</h2>
<p>现在我们已经知道基本的步调了，是时候开始跳舞并玩一些疯狂的事情了。我曾经写过一篇 <a href="http://arigrant.com/blog/2014/1/19/adventures-in-the-land-of-nsarray"><code>NSArray</code> 深度探究</a>的博客。这篇博客用了很多 <code>NSLog</code> 语句，但实际上我的所有探索都是在调试器中完成的。看看你能不能弄明白怎么做的，这会是一个有意思的练习。</p>
<h3 id="-">不用断点调试</h3>
<p>程序运行时，Xcode 的调试条上会出现暂停按钮，而不是继续按钮：</p>
<p><img src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/Screen_Shot_2014_11_22_at_1_50_56_PM.png" width="300"></p>
<p>点击按钮会暂停 app (这会运行 <code>process interrupt</code> 命令，因为 LLDB 总是在背后运行)。这会让你可以访问调试器，但看起来可以做的事情不多，因为在当前作用域没有变量，也没有特定的代码让你看。</p>
<p>这就是有意思的地方。如果你正在运行 iOS app，你可以试试这个： (因为全局变量是可访问的)</p>
<pre><code class="hljs objectivec">    (lldb) po [[[<span class="hljs-built_in">UIApplication</span> sharedApplication] keyWindow] recursiveDescription]
&lt;<span class="hljs-built_in">UIWindow</span>: <span class="hljs-number">0x7f82b1fa8140</span>; frame = (<span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">320</span> <span class="hljs-number">568</span>); gestureRecognizers = &lt;<span class="hljs-built_in">NSArray</span>: <span class="hljs-number">0x7f82b1fa92d0</span>&gt;; layer = &lt;<span class="hljs-built_in">UIWindowLayer</span>: <span class="hljs-number">0x7f82b1fa8400</span>&gt;&gt;
   | &lt;<span class="hljs-built_in">UIView</span>: <span class="hljs-number">0x7f82b1d01fd0</span>; frame = (<span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">320</span> <span class="hljs-number">568</span>); autoresize = W+H; layer = &lt;<span class="hljs-built_in">CALayer</span>: <span class="hljs-number">0x7f82b1e2e0a0</span>&gt;&gt;
</code></pre><p>你可以看到整个层次。<a href="https://github.com/facebook/chisel">Chisel</a> 中 <code>pviews</code> 就是这么实现的。</p>
<h3 id="-ui">更新UI</h3>
<p>有了上面的输出，我们可以获取这个 view：</p>
<pre><code class="hljs objectivec">(lldb) e <span class="hljs-keyword">id</span> $myView = (<span class="hljs-keyword">id</span>)<span class="hljs-number">0x7f82b1d01fd0</span>
</code></pre><p>然后在调试器中改变它的背景色：</p>
<pre><code class="hljs objectivec">(lldb) e (<span class="hljs-keyword">void</span>)[$myView setBackgroundColor:[<span class="hljs-built_in">UIColor</span> blueColor]]
</code></pre><p>但是只有程序继续运行之后才会看到界面的变化。因为改变的内容必须被发送到渲染服务中，然后显示才会被更新。</p>
<p>渲染服务实际上是一个另外的进程 (被称作 <code>backboardd</code>)。这就是说即使我们正在调试的内容所在的进程被打断了，<code>backboardd</code> 也还是继续运行着的。</p>
<p>这意味着你可以运行下面的命令，而不用继续运行程序：</p>
<pre><code class="hljs objectivec">(lldb) e (<span class="hljs-keyword">void</span>)[<span class="hljs-built_in">CATransaction</span> flush]
</code></pre><p>即使你仍然在调试器中，UI 也会在模拟器或者真机上实时更新。<a href="https://github.com/facebook/chisel">Chisel</a> 为此提供了一个别名叫做 <code>caflush</code>，这个命令被用来实现其他的快捷命令，例如 <code>hide &lt;view&gt;</code>，<code>show &lt;view&gt;</code> 以及其他很多命令。所有 <a href="https://github.com/facebook/chisel">Chisel</a> 的命令都有文档，所以安装后随意运行 <code>help show</code> 来看更多信息。</p>
<h3 id="push-view-controller">Push 一个 View Controller</h3>
<p>想象一个以 <code>UINavigationController</code> 为 root ViewController 的应用。你可以通过下面的命令，轻松地获取它：</p>
<pre><code class="hljs objectivec">(lldb) e <span class="hljs-keyword">id</span> $nvc = [[[<span class="hljs-built_in">UIApplication</span> sharedApplication] keyWindow] rootViewController]
</code></pre><p>然后 push 一个 child view controller:</p>
<pre><code class="hljs objectivec">(lldb) e <span class="hljs-keyword">id</span> $vc = [<span class="hljs-built_in">UIViewController</span> new]
(lldb) e (<span class="hljs-keyword">void</span>)[[$vc view] setBackgroundColor:[<span class="hljs-built_in">UIColor</span> yellowColor]]
(lldb) e (<span class="hljs-keyword">void</span>)[$vc setTitle:<span class="hljs-string">@"Yay!"</span>]
(lldb) e (<span class="hljs-keyword">void</span>)[$nvc pushViewContoller:$vc animated:<span class="hljs-literal">YES</span>]
</code></pre><p>最后运行下面的命令：</p>
<pre><code class="hljs java">(lldb) caflush <span class="hljs-comment">// e (void)[CATransaction flush]</span>
</code></pre><p>navigation Controller 就会立刻就被 push 到你眼前。</p>
<h3 id="-target">查找按钮的 target</h3>
<p>想象你在调试器中有一个 <code>$myButton</code> 的变量，可以是创建出来的，也可以是从 UI 上抓取出来的，或者是你停止在断点时的一个局部变量。你想知道，按钮按下的时候谁会接收到按钮发出的 action。非常简单：</p>
<pre><code class="hljs bash">(lldb) po [<span class="hljs-variable">$myButton</span> allTargets]
{(
    &lt;MagicEventListener: 0x7fb58bd2e240&gt;
)}
(lldb) po [<span class="hljs-variable">$myButton</span> actionsForTarget:(id)0x7fb58bd2e240 <span class="hljs-keyword">for</span>ControlEvent:0]
&lt;__NSArrayM 0x7fb58bd2aa40&gt;(
_handleTap:
)
</code></pre><p>现在你或许想在它发生的时候加一个断点。在 <code>-[MagicEventListener _handleTap:]</code> 设置一个符号断点就可以了，在 Xcode 和 LLDB 中都可以，然后你就可以点击按钮并停在你所希望的地方了。</p>
<h3 id="-">观察实例变量的变化</h3>
<p>假设你有一个 <code>UIView</code>，不知道为什么它的 <code>_layer</code> 实例变量被重写了 (糟糕)。因为有可能并不涉及到方法，我们不能使用符号断点。相反的，我们想<strong>监视</strong>什么时候这个地址被写入。</p>
<p>首先，我们需要找到 <code>_layer</code> 这个变量在对象上的相对位置：</p>
<pre><code class="hljs ruby">(lldb) p (ptrdiff_t)ivar_getOffset((struct Ivar *)class_getInstanceVariable([MyView <span class="hljs-class"><span class="hljs-keyword">class</span>], "<span class="hljs-title">_layer</span>"))</span>
(ptrdiff_t) $0 = <span class="hljs-number">8</span>
</code></pre><p>现在我们知道 <code>($myView + 8)</code> 是被写入的内存地址：</p>
<pre><code class="hljs bash">(lldb) watchpoint <span class="hljs-built_in">set</span> expression -- (int *)<span class="hljs-variable">$myView</span> + 8
Watchpoint created: Watchpoint 3: addr = 0x7fa554231340 size = 8 state = enabled <span class="hljs-built_in">type</span> = w
    new value: 0x0000000000000000
</code></pre><p>这被以 <code>wivar $myView _layer</code> 加入到 <a href="https://github.com/facebook/chisel">Chisel</a> 中。</p>
<h3 id="-">非重写方法的符号断点</h3>
<p>假设你想知道 <code>-[MyViewController viewDidAppear:]</code> 什么时候被调用。如果这个方法并没有在<code>MyViewController</code> 中实现，而是在其父类中实现的，该怎么办呢？试着设置一个断点，会出现以下结果：</p>
<pre><code class="hljs">(lldb) b -[MyViewController viewDidAppear:]
Breakpoint 1: no locations (pending).
WARNING:  Unable to resolve breakpoint to any actual locations.
</code></pre><p>因为 LLDB 会查找一个<strong>符号</strong>，但是实际在这个类上却找不到，所以断点也永远不会触发。你需要做的是为断点设置一个条件 <code>[self isKindOfClass:[MyViewController class]]</code>，然后把断点放在 <code>UIViewController</code> 上。正常情况下这样设置一个条件可以正常工作。但是这里不会，因为我们没有父类的实现。</p>
<p><code>viewDidAppear:</code> 是苹果实现的方法，因此没有它的符号；在方法内没有 <code>self</code> 。如果想在符号断点上使用 <code>self</code>，你必须知道它在哪里 (它可能在寄存器上，也可能在栈上；在 x86 上，你可以在 <code>$esp+4</code> 找到它)。但是这是很痛苦的，因为现在你必须至少知道四种体系结构 (x86，x86-64，armv7，armv64)。想象你需要花多少时间去学习命令集以及它们每一个的<a href="http://en.m.wikipedia.org/wiki/Calling_convention">调用约定</a>，然后正确的写一个在你的超类上设置断点并且条件正确的命令。幸运的是，这个在 <a href="https://github.com/facebook/chisel">Chisel</a> 被解决了。这被成为 <code>bmessage</code>：</p>
<pre><code class="hljs objectivec">(lldb) bmessage -[MyViewController viewDidAppear:]
Setting a breakpoint at -[<span class="hljs-built_in">UIViewController</span> viewDidAppear:] with condition (<span class="hljs-keyword">void</span>*)object_getClass((<span class="hljs-keyword">id</span>)$rdi) == <span class="hljs-number">0x000000010e2f4d28</span>
Breakpoint <span class="hljs-number">1</span>: where = <span class="hljs-built_in">UIKit</span>`-[<span class="hljs-built_in">UIViewController</span> viewDidAppear:], address = <span class="hljs-number">0x000000010e11533c</span>
</code></pre><h3 id="lldb-python">LLDB 和 Python</h3>
<p>LLDB 有内建的，完整的 <a href="http://lldb.llvm.org/python-reference.html">Python</a> 支持。在LLDB中输入 <code>script</code>，会打开一个 Python REPL。你也可以输入一行 python 语句作为 <code>script 命令</code> 的参数，这可以运行 python 语句而不进入REPL：</p>
<pre><code class="hljs swift">(lldb) script <span class="hljs-keyword">import</span> os
(lldb) script os.system(<span class="hljs-string">"open http://www.objc.io/"</span>)
</code></pre><p>这样就允许你创造各种酷的命令。把下面的语句放到文件 <code>~/myCommands.py</code> 中：</p>
<pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">caflushCommand</span><span class="hljs-params">(debugger, command, result, internal_dict)</span></span>:
  debugger.HandleCommand(<span class="hljs-string">"e (void)[CATransaction flush]"</span>)
</code></pre><p>然后再 LLDB 中运行：</p>
<pre><code class="hljs swift">command script <span class="hljs-keyword">import</span> ~/myCommands.py
</code></pre><p>或者把这行命令放在 <code>/.lldbinit</code> 里，这样每次进入 LLDB 时都会自动运行。<a href="https://github.com/facebook/chisel">Chisel</a> 其实就是一个 Python 脚本的集合，这些脚本拼接 (命令) 字符串 ，然后让 LLDB 执行。很简单，不是吗？</p>
<h2 id="-">紧握调试器这一武器</h2>
<p>LLDB 可以做的事情很多。大多数人习惯于使用 <code>p</code>，<code>po</code>，<code>n</code>，<code>s</code> 和 <code>c</code>，但实际上除此之外，LLDB 可以做的还有很多。掌握所有的命令 (实际上并不是很多)，会让你在揭示代码运行时的运行状态，寻找 bug，强制执行特定的运行路径时获得更大的能力。你甚至可以构建简单的交互原型 - 比如要是现在以 modal 方式弹出一个 View Controller 会怎么样？使用调试器，一试便知。</p>
<p>这篇文章是为了想你展示 LLDB 的强大之处，并且鼓励你多去探索在控制台输入命令。</p>
<p>打开 LLDB，输入 <code>help</code>，看一看列举的命令。你尝试过多少？用了多少？</p>
<p>但愿 <code>NSLog</code> 看起来不再那么吸引你去用，每次编辑再运行并不有趣而且耗时。</p>
<p>调试愉快！</p>
<hr>
<p>原文 <a href="http://www.objc.io/issue-19/lldb-debugging.html">Dancing in the Debugger — A Waltz with LLDB</a></p>

    </div>
    <div class="article-author-detail">
        <div class="article-author">
            <div class="article-author-title">
                译者简介
            </div>
            <figure class="artical-media_image artical-author-photo">
                <img width="300" height="300" src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/nangege.png">
            </figure>
            <div class="article-author-body">
                <h4 class="article-author-body"> 
                    <a href="https://github.com/nangege"> nangege </a> 
                </h4> 
                <div class="article-author-bio">
                    <p>现在是程序员，希望以后成为会写代码的设计师。喜欢简单的东西。</p> 
                </div>
            </div>
        </div>
    <hr>
</div>

<script src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
            </div></main>
            
            
            <div class="footer">
            <span class="dim">© 2016 <a href="https://onevcat.com/">OneV's Den</a> &amp; <a href="http://objccn.io/">ObjC 中国</a><br>本站由 <a href="http://onev.cat/">@onevcat</a> 创建</span>
            </div>
            
            <!-- Latest compiled and minified JavaScript -->
            <script src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/jquery.min.js"></script>
            <script src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/bootstrap.min.js"></script>
            <script src="./ObjC 中国 - 与调试器共舞 - LLDB 的华尔兹_files/main-min.js"></script>
        </div>
    

</body></html>